{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"About the author","text":"<p>Hi Im Yollotl Tamayo, I play piano.</p>"},{"location":"anteproyecto/","title":"Anteproyecto","text":""},{"location":"anteproyecto/#titulo-del-trabajo","title":"T\u00edtulo del trabajo","text":"<p>\"HERRAMIENTA DE EVALUACI\u00d3N DE PROBLEMAS, GESTI\u00d3N DE CONCURSOS Y PUBLICACI\u00d3N DE CONTENIDOS EN PROGRAMACI\u00d3N COMPETITIVA: JUEZ EN L\u00cdNEA\"</p>"},{"location":"anteproyecto/#objetivo-del-trabajo","title":"Objetivo del trabajo","text":"<p>El objetivo de la tesina es dotar al grupo de algoritmos (GUAPA) y a terceros con roles de problem setter (organizador) ,por medio de una pagina web, de la capacidad de crear y calificar problemas individuales, incluyendo la automatizaci\u00f3n de casos de prueba, la calificaci\u00f3n y el reporte del estado del env\u00edo en tiempo real. Adem\u00e1s, se busca que puedan crear concursos con varios problemas, gestionar estos concursos, publicarlos y controlar qui\u00e9n puede acceder a ellos. Tambi\u00e9n se incluye la posibilidad de publicar contenido relacionado con la programaci\u00f3n competitiva, como blogs.</p>"},{"location":"anteproyecto/#indice","title":"Indice","text":"<ul> <li>Cap\u00edtulo I Introducci\u00f3n</li> <li>Cap\u00edtulo II.-Justificaci\u00f3n</li> <li>Cap\u00edtulo III.-Caracter\u00edsticas del juez</li> <li>Cap\u00edtulo IV.- Infraestructura</li> <li>Cap\u00edtulo V.- Frontend</li> <li>Cap\u00edtulo VI.- Dev ops y CI</li> <li>Cap\u00edtulo VII.- Documentaci\u00f3n</li> <li>Cap\u00edtulo VIII.- Conclusiones</li> </ul>"},{"location":"anteproyecto/#resumen-de-cada-capitulo","title":"Resumen de cada capitulo","text":""},{"location":"anteproyecto/#capitulo-i-introduccion","title":"Cap\u00edtulo I Introducci\u00f3n","text":"<p>En este cap\u00edtulo se introduce el concepto de un juez en l\u00ednea, programaci\u00f3n competitiva y cual es el proposito del juez.</p>"},{"location":"anteproyecto/#capitulo-ii-justificacion","title":"Cap\u00edtulo II Justificaci\u00f3n","text":"<p>Se detalla la necesidad de un nuevo juez en l\u00ednea, destacando las limitaciones y deficiencias de los sistemas existentes. Se explica por qu\u00e9 se elige Rust como lenguaje de programaci\u00f3n, se\u00f1alando sus ventajas en t\u00e9rminos de rendimiento y seguridad. Tambi\u00e9n se justifica la elecci\u00f3n de React y TypeScript para el frontend eficiencia en el desarrollo de interfaces de usuario interactivas. Adem\u00e1s, se menciona por qu\u00e9 se elige Postgres como base de datos, destacando su capacidad para manejar grandes vol\u00famenes de datos de manera eficiente. </p>"},{"location":"anteproyecto/#capitulo-iii-caracteristicas-del-juez","title":"Cap\u00edtulo III  Caracter\u00edsticas del juez","text":"<p>Este cap\u00edtulo enumera todas las funcionalidades ofrecidas por el juez en l\u00ednea, present\u00e1ndolas de manera clara y concisa como un manual de usuario. Cada caracter\u00edstica se describe en t\u00e9rminos de su utilidad y modo de operaci\u00f3n, proporcionando ejemplos graficos cuando sea necesario. Se incluyen tanto las funciones b\u00e1sicas, como el registro de usuarios y el env\u00edo de soluciones, como las funciones avanzadas, la gesti\u00f3n de concursos y la creaci\u00f3n de problemas.</p>"},{"location":"anteproyecto/#capitulo-iv-infraestructura","title":"Cap\u00edtulo IV Infraestructura","text":"<p>En este cap\u00edtulo se explica a fondo toda los servicios internos del juez. Se detalla la tecnolog\u00eda utilizada, incluyendo Axum, RabbitMQ y Redis . Adem\u00e1s, se profundiza en la base de datos, presentando el diagrama entidad-relaci\u00f3n y las migraciones. Se describen tambi\u00e9n aspectos clave del servidor web, como la autenticaci\u00f3n de usuarios, el uso de web sockets, medidas de seguridad implementadas, el servidor SMTP y aspectos de rendimiento como el server side rendering. El cap\u00edtulo tambi\u00e9n aborda el evaluador, detallando su arquitectura, dise\u00f1o del c\u00f3digo, medidas de seguridad implementadas y optimizaci\u00f3n. Finalmente, se presenta el sistema de env\u00edos y concursos, explicando el flujo de un env\u00edo, el funcionamiento de un concurso y el sistema de notificaciones en tiempo real. Por ultimo se detalla los aspectos de la administraci\u00f3n del juez, incluyendo el modelo de roles y grupos.</p>"},{"location":"anteproyecto/#capitulo-v-frontend","title":"Cap\u00edtulo V Frontend","text":"<p>En este cap\u00edtulo se detalla la estructura del c\u00f3digo del frontend, explicando c\u00f3mo se organiza para garantizar la mantenibilidad y escalabilidad del sistema. Se presenta el stack tecnol\u00f3gico utilizado, que incluye React, Next.js y TypeScript, destacando las ventajas que cada uno aporta al desarrollo de la interfaz de usuario. Se profundiza en el uso de TypeScript y c\u00f3mo se aprovecha junto a Rust para mantener la coherencia en el intercambio de peticiones HTTP. Adem\u00e1s, se aborda el proceso de dise\u00f1o de la interfaz de usuario utilizando Figma, detallando las reglas de dise\u00f1o que sigue la interfaz del juez.</p>"},{"location":"anteproyecto/#capitulo-vi-devops","title":"Cap\u00edtulo VI DevOps","text":"<p>En este cap\u00edtulo se describe el proceso de dockerizaci\u00f3n del proyecto, que consiste en empaquetar cada microservicio del juez en un contenedor Docker para facilitar su implementaci\u00f3n y gesti\u00f3n. Se aborda la cross compilacion entres sistemas (ARM y x86). Se explica la comunicaci\u00f3n entre microservicios, que se realiza a trav\u00e9s de solicitudes HTTP y con el protocolo bincode. Tambi\u00e9n se describe la seguridad de las instancias y la red compartida del juez.</p>"},{"location":"anteproyecto/#capitulo-vii-documentacion","title":"Cap\u00edtulo VII Documentaci\u00f3n","text":"<p>En este cap\u00edtulo se describe el proceso de documentaci\u00f3n en Rust utilizando la auto documentaci\u00f3n proporcionada por el lenguaje. Se explica c\u00f3mo se generan y organizan autom\u00e1ticamente los documentos. Adem\u00e1s, se detalla el proceso de implementaci\u00f3n de la documentaci\u00f3n en GitHub, explicando c\u00f3mo se realiza el despliegue para que est\u00e9 disponible para los usuarios finales.</p>"},{"location":"anteproyecto/#capitulo-viii-conclusiones","title":"Cap\u00edtulo VIII Conclusiones","text":"<p>El cap\u00edtulo de conclusiones destaca los principales logros y desaf\u00edos enfrentados durante el desarrollo del juez. Se resalta la importancia de la elecci\u00f3n de tecnolog\u00edas como Rust, React, TypeScript y Postgres para elp royecto. Se hace \u00e9nfasis en la importancia de una documentaci\u00f3n detallada y accesible, as\u00ed como en la atenci\u00f3n al dise\u00f1o y la usabilidad en todas las etapas del desarrollo. Tambi\u00e9n se mencionan  \u00e1reas de mejora y sugerencias para futuras iteraciones del proyecto.</p>"},{"location":"indice/","title":"Indice","text":""},{"location":"indice/#indice-tentativo","title":"Indice ( tentativo )","text":"<p>Este indice sigue sujeto a cambios</p> <ol> <li>Introducci\u00f3n<ol> <li>\u00bf Que es un juez en l\u00ednea ?</li> <li>\u00bf Cu\u00e1l es el prop\u00f3sito del juez ?</li> </ol> </li> <li>Justificaci\u00f3n<ol> <li>\u00bf Porque un nuevo juez?</li> <li>\u00bf Porque Rust?</li> <li>\u00bf Porque React y typescript ?</li> <li>\u00bf Porque Postgres?</li> <li>\u00bf Porque digital ocean ?</li> </ol> </li> <li>Caracter\u00edsticas del juez</li> <li>Explicaci\u00f3n de todas las features</li> <li>Overview de la arquitectura</li> <li>Overview del frontend</li> <li>Back end</li> <li>Explicacion general.<ul> <li>Explicaci\u00f3n de la arquitectura</li> <li>C\u00f3mo se estructura el c\u00f3digo del backend</li> <li>Tech stack - Axum - Encolador Rabbitmq - Redis - Docker    a. Base de datos</li> <li>Diagrama entidad relaci\u00f3n</li> <li>Migraciones    b. Servidor web</li> <li>Autenticaci\u00f3n de usuarios</li> <li>Web socket</li> <li>Seguridad</li> <li>Servidor SMTP</li> <li>Server side rendering y spa    c. Evaluador</li> <li>Arquitectura</li> <li>Dise\u00f1o del c\u00f3digo y patrones de dise\u00f1o involucrados</li> <li>Sandboxing y temas de seguridad</li> <li>Optimizaci\u00f3n?</li> </ul> </li> <li>Sistema de envios y concursos<ul> <li>flujo de un envio</li> <li>funcionamiento de un concurso</li> <li>sistema de notificaciones</li> </ul> </li> <li>Administracion del juez<ul> <li>modelo de roles</li> <li>grupos privados</li> </ul> </li> <li>Frontend</li> <li>C\u00f3mo se estructura el c\u00f3digo</li> <li>Tech stack</li> <li>React</li> <li>NextJs</li> <li>Typescript e intercambio de tipos</li> <li>Dise\u00f1o de UI ( Figma )</li> <li>Dev ops y CI</li> <li>Dockerizacion</li> <li>comunicacion entre microservicios</li> <li>seguridad de las instancias y red compartida</li> <li>Documentaci\u00f3n</li> <li>Documentaci\u00f3n en Rust.</li> <li>deploy de documentacion a github</li> </ol>"},{"location":"indice/#notas","title":"Notas","text":""}]}